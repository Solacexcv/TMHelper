echo "ZnVuY3Rpb24gdHlwZV9hbmltYXRpb24oKSB7CiAgICBsb2NhbCB0ZXh0PSIkMSIKICAgIGxvY2FsIGludGVydmFsPTAuMDAwMDAxCgogICAgZm9yICgoaSA9IDA7IGkgPCAkeyN0ZXh0fTsgaSArPSAzKSk7IGRvCiAgICAgICAgZWNobyAtbiAtZSAiXDAzM1sxOzMybSR7dGV4dDokaTozfVwwMzNbMG0iCiAgICAgICAgc2xlZXAgJGludGVydmFsCiAgICBkb25lCmVjaG8KfQoKZnVuY3Rpb24gcmVkX2V4aXQoKSB7CiAgICBlY2hvIC1lICJcMDMzWzE7MzFtMF0gRXhpdFwwMzNbMG0iCn0KCmZ1bmN0aW9uIGdyZWVuX3RleHRfYW5pbWF0aW9uKCkgewogICAgbG9jYWwgdGV4dD0iJDEiCiAgICBlY2hvIC1lIC1uICJcMDMzWzE7NDI7OTdtJHRleHRcMDMzWzBtIgp9CgoKIyBEZWZpbmUgYW4gYXJyYXkgb2YgcG9zaXRpdmUgbWVzc2FnZXMKcG9zaXRpdmVfbWVzc2FnZXM9KAogICAgIkhhdmUgYSBmYW50YXN0aWMgZGF5ISIKICAgICJZb3UndmUgZ290IHRoaXMhIEtlZXAgZ29pbmcuIgogICAgIlNwcmVhZCBwb3NpdGl2aXR5IHdoZXJldmVyIHlvdSBnby4iCiAgICAiQmVsaWV2ZSBpbiB5b3Vyc2VsZiBhbmQgeW91ciBkcmVhbXMuIgogICAgIllvdSBhcmUgY2FwYWJsZSBvZiBhY2hpZXZpbmcgZ3JlYXQgdGhpbmdzLiIKICAgICJZb3VyIHBvc2l0aXZlIGF0dGl0dWRlIGNhbiBjaGFuZ2UgdGhlIHdvcmxkLiIKICAgICJFbWJyYWNlIGNoYWxsZW5nZXMgYXMgb3Bwb3J0dW5pdGllcyBmb3IgZ3Jvd3RoLiIKICAgICJSZW1lbWJlciB0byBzbWlsZSBhbmQgYnJpZ2h0ZW4gc29tZW9uZSdzIGRheS4iCiAgICAiWW91ciBlZmZvcnRzIHdpbGwgcGF5IG9mZiBpbiB0aGUgbG9uZyBydW4uIgogICAgIllvdSdyZSBub3QgYWxvbmUg4oCTIHJlYWNoIG91dCBpZiB5b3UgbmVlZCBzdXBwb3J0LiIKICAgICJZb3VyIHBvdGVudGlhbCBpcyBsaW1pdGxlc3MuIEtlZXAgcHVzaGluZyBmb3J3YXJkLiIKICAgICJZb3UgaGF2ZSB0aGUgcG93ZXIgdG8gbWFrZSBhIGRpZmZlcmVuY2UuIgogICAgIkNoYWxsZW5nZXMgYXJlIHN0ZXBwaW5nIHN0b25lcyB0byBzdWNjZXNzLiIKICAgICJUb2RheSBpcyBhIGdpZnQ7IHRoYXQncyB3aHkgaXQncyBjYWxsZWQgdGhlIHByZXNlbnQuIgogICAgIllvdXIgcGVyc2V2ZXJhbmNlIHdpbGwgbGVhZCB0byBzdWNjZXNzLiIKICAgICJSYWRpYXRlIHBvc2l0aXZpdHkgYW5kIGluc3BpcmUgdGhvc2UgYXJvdW5kIHlvdS4iCiAgICAiVGhlIGJlc3Qgd2F5IHRvIHByZWRpY3QgdGhlIGZ1dHVyZSBpcyB0byBjcmVhdGUgaXQuIgogICAgIllvdSBwb3NzZXNzIHRoZSBxdWFsaXRpZXMgbmVlZGVkIHRvIGFjaGlldmUgZ3JlYXRuZXNzLiIKICAgICJTdWNjZXNzIHN0YXJ0cyB3aXRoIGEgcG9zaXRpdmUgbWluZHNldCBhbmQgaGFyZCB3b3JrLiIKICAgICJZb3VyIGpvdXJuZXkgaXMgdW5pcXVlbHkgeW91cnMg4oCTIGVtYnJhY2UgaXQgZnVsbHkuIgogICAgIllvdSBhcmUgYSBiZWFjb24gb2YgbGlnaHQgaW4gdGhlIGxpdmVzIG9mIG90aGVycy4iCiAgICAiU21hbGwgc3RlcHMgZm9yd2FyZCBzdGlsbCBsZWFkIHRvIHByb2dyZXNzLiIKICAgICJCZWxpZXZlIGluIHRoZSBtYWdpYyB3aXRoaW4geW91LiIKICAgICJZb3VyIGRyZWFtcyBhcmUgdmFsaWQgYW5kIGFjaGlldmFibGUuIgogICAgIllvdSBoYXZlIHRoZSBzdHJlbmd0aCB0byBvdmVyY29tZSBhbnkgY2hhbGxlbmdlLiIKICAgICJZb3VyIHByZXNlbmNlIG1ha2VzIGEgcG9zaXRpdmUgaW1wYWN0LiIKICAgICJLZWVwIHlvdXIgZmFjZSB0byB0aGUgc3Vuc2hpbmUgYW5kIHNoYWRvd3Mgd2lsbCBmYWxsIGJlaGluZCB5b3UuIgopCgojIERlZmluZSBhIGZ1bmN0aW9uIHRvIHByaW50IGEgcmFuZG9tIHBvc2l0aXZlIG1lc3NhZ2UgaW4gYm9sZApwcmludF9yYW5kb21fbmljZV9tZXNzYWdlKCkgewogICAgIyBHZW5lcmF0ZSBhIHJhbmRvbSBpbmRleCB3aXRoaW4gdGhlIHJhbmdlIG9mIHRoZSBhcnJheQogICAgcmFuZG9tX2luZGV4PSQoKFJBTkRPTSAlICR7I3Bvc2l0aXZlX21lc3NhZ2VzW0BdfSkpCgogICAgIyBQcmludCB0aGUgcmFuZG9tbHkgc2VsZWN0ZWQgbWVzc2FnZSBpbiBib2xkCiAgICBlY2hvIC1lICJcMDMzWzFtJHtwb3NpdGl2ZV9tZXNzYWdlc1tyYW5kb21faW5kZXhdfVwwMzNbMG0iCn0KCgoKZGlzcGxheV9tZW51KCkgewogICAgY2xlYXIKCiAgICB0eXBlX2FuaW1hdGlvbiAiICAg4paA4paA4paI4paA4paAIOKWiOKWgOKWgCDilojiloDiloDilogg4paI4paA4paE4paA4paIIOKWiOKWkeKWkeKWiCDilojilpHilogiCiAgICB0eXBlX2FuaW1hdGlvbiAiICAg4paR4paS4paI4paR4paRIOKWiOKWgOKWgCDilojiloTiloTiloAg4paI4paR4paA4paR4paIIOKWiOKWkeKWkeKWiCDiloTiloDiloQiCiAgICB0eXBlX2FuaW1hdGlvbiAiICAg4paR4paS4paI4paR4paRIOKWgOKWgOKWgCDiloDilpHiloDiloAg4paA4paR4paR4paR4paAIOKWkeKWgOKWgOKWgCDiloDilpHiloAiCiAgICBlY2hvIC1lICJcMDMzWzE7MzJtKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXDAzM1swbSIKICAgICBlY2hvIC1lICJcMDMzWzMzOzVtICAgIFNvbGFjZXhjdlwwMzNbMG0gXDAzM1szMm1IZWxwZXIgTWVudVwwMzNbMG0iCiAgICBlY2hvIC1lICJcMDMzWzE7MzJtKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXDAzM1swbSIKICAgIHR5cGVfYW5pbWF0aW9uICJQbGVhc2Ugc2VsZWN0IGFuIG9wdGlvbjoiCiAgICB0eXBlX2FuaW1hdGlvbiAiMV0gTWF4UGhpc2hlciIKICAgIHR5cGVfYW5pbWF0aW9uICIyXSBQeVBoaXNoZXIiCiAgICB0eXBlX2FuaW1hdGlvbiAiM10gQ2xpZnR5IgogICAgdHlwZV9hbmltYXRpb24gIjRdIE1hc2tQaGlzaCIKICAgIHR5cGVfYW5pbWF0aW9uICI1XSBDYW1QaGlzaCIKICAgIHR5cGVfYW5pbWF0aW9uICI2XSBVYnVudHUgU2hlbGwiCiAgICB0eXBlX2FuaW1hdGlvbiAiN10gVHJhY2UgRXhhY3QgTG9jYXRpb24iCiAgICB0eXBlX2FuaW1hdGlvbiAiOF0gQ2FtLUR1bXBlciIKICAgIHR5cGVfYW5pbWF0aW9uICI5XSBUcmFjay1JUCIKICAgIHR5cGVfYW5pbWF0aW9uICIxMF0gQnJ1dGVGb3JjZVtQQVNTOiBURUFNIFNUTFBdIgogICAgdHlwZV9hbmltYXRpb24gIjExXSBUb29sLVgiCiAgICB0eXBlX2FuaW1hdGlvbiAiMTJdIFVwZGF0ZSBUTUhlbHBlciIKICAgIHR5cGVfYW5pbWF0aW9uICIxM10gVW5pbnN0YWxsIFRNSGVscGVyIgogICAgcmVkX2V4aXQKfQoKCgojIE1haW4gbG9vcAp3aGlsZSB0cnVlOyBkbwogICAgZGlzcGxheV9tZW51CiAgICBncmVlbl90ZXh0X2FuaW1hdGlvbiAiPj4gU2VsZWN0IGFuIE9wdGlvbiAtLT4gIgogICAgZWNobyAtbiAiICIKICAgIHJlYWQgY2hvaWNlCgoKYm9sZD0iXDAzM1sxbSIKcmVkX2JnPSJcMDMzWzQxbSIKcmVzZXQ9IlwwMzNbMG0iCgogICAgY2FzZSAkY2hvaWNlIGluCiAgICAgICAgMCkKICAgICAgICAgIGVjaG8KICAgICAgICAgIGdyZWVuX3RleHRfYW5pbWF0aW9uICJUZXJtdXggSGVscGVyIEV4aXRlZCBzdWNjZXNzZnVsbHkuIgogICAgICAgICAgZWNobwogICAgICAgICAgcHJpbnRfcmFuZG9tX25pY2VfbWVzc2FnZQogICAgICAgIGV4aXQgMAogICAgICAgICAgICA7OwogICAgICAgIDEpCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9tICJcbllvdSBzZWxlY3RlZDogTWF4UGhpc2hlciIKICAgICAgICAgICAgdHlwZV9hbmltYXRpb24gIlBsZWFzZSBXYWl0IE1heFBoaXNoZXIgaXMgSW5zdGFsbGluZy4uLiAiCiAgICAgICAgICAgIHdnZXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0thc1JvdWRyYS9NYXhQaGlzaGVyL21haW4vbWF4cGhpc2hlci5weSAmJiBweXRob24zIG1heHBoaXNoZXIucHkKICAgICAgICAgICAgOzsKICAgICAgICAyKQogICAgICAgICAgICB0eXBlX2FuaW1hdGlvbiAiXG5Zb3Ugc2VsZWN0ZWQ6IFB5UGhpc2hlciIKICAgICAgICAgICAgdHlwZV9hbmltYXRpb24gIlBsZWFzZSBXYWl0IFB5UGhpc2hlciBpcyBJbnN0YWxsaW5nLi4uICIKICAgICAgICAgICAgd2dldCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vS2FzUm91ZHJhL1B5UGhpc2hlci9tYWluL3B5cGhpc2hlci5weSAmJiBweXRob24zIHB5cGhpc2hlci5weQogICAgICAgICAgICA7OwogICAgICAgIDMpCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJcbllvdSBzZWxlY3RlZDogQ2xpZnR5IgogICAgICAgICAgICB0eXBlX2FuaW1hdGlvbiAiUGxlYXNlIFdhaXQgQ2xpZnR5IGlzIEluc3RhbGxpbmcuLi4gIgogICAgICAgICAgICB3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9BbHlnbnQvQ2xpZnR5L21haW4vY2xpZnR5LnNoICYmIGNobW9kICt4IGNsaWZ0eS5zaCAmJiBiYXNoIGNsaWZ0eS5zaAogICAgICAgICAgICA7OwogICAgICAgIDQpCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJcbllvdSBzZWxlY3RlZDogTWFza1BoaXNoIgogICAgICAgICAgICB0eXBlX2FuaW1hdGlvbiAiUGxlYXNlIFdhaXQgTWFza1BoaXNoIGlzIEluc3RhbGxpbmcuLi4gIgogICAgICAgICAgICB3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYXlrYWxpL21hc2twaGlzaC9tYXN0ZXIvLmdpdGh1Yi9GVU5ESU5HLnltbAogICAgICAgICAgICB3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYXlrYWxpL21hc2twaGlzaC9tYXN0ZXIvbWFza3BoaXNoLnNoICYmIGNobW9kICt4IG1hc2twaGlzaC5zaCAmJiBiYXNoIG1hc2twaGlzaC5zaAogICAgICAgICAgICA7OwogICAgICAgIDUpCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJcbllvdSBzZWxlY3RlZDogQ2FtUGhpc2giCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJQbGVhc2UgV2FpdCBDYW1QaGlzaCBpcyBJbnN0YWxsaW5nLi4uICIKICAgICAgICAgICAgYXB0LWdldCAteSBpbnN0YWxsIHBocCBvcGVuc3NoIGdpdCB3Z2V0CiAgICAgICAgICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vdGVjaGNoaXBuZXQvQ2FtUGhpc2gKICAgICAgICAgICAgZ3JlZW5fdGV4dF9hbmltYXRpb24gIlxuQ2FtUGhpc2ggZG9uZSBpbnN0YWxsaW5nIGJ1dCBpdHMgbm90IGF1dG9tYXRpY2FsbHkgcnVuLCB0byBydW4gdGhpcyB0b29sIGV4aXQgVE1IZWxwZXIgfHwgY2QgQ2FtUGhpc2ggfHwgY2htb2QgK3ggY2FtcGhpc2guc2ggfHwgLi9jYW1waGlzaC5zaCBvciBiYXNoIGNhbXBoaXNoLnNoXG4iCiAgICAgICAgICAgIDs7CiAgICAgICAgNikKICAgICAgICAgICAgdHlwZV9hbmltYXRpb24gIlxuWW91IHNlbGVjdGVkOiBVYnVudHUgU2hlbGwiCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJQbGVhc2UgV2FpdCBVYnVudHUgU2hlbGwgaXMgSW5zdGFsbGluZy4uLiAiCiAgICAgICAgICAgIHBrZyBpbnN0YWxsIHByb290IC15ICYmIHdnZXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01GREdhbWluZy91YnVudHUtaW4tdGVybXV4L21hc3Rlci91YnVudHUuc2ggJiYgY2htb2QgK3ggdWJ1bnR1LnNoICYmIC4vdWJ1bnR1LnNoIC15ICYmIC4vc3RhcnR1YnVudHUuc2gKICAgICAgICAgICAgOzsKICAgICAgICA3KQogICAgICAgICAgICB0eXBlX2FuaW1hdGlvbiAiXG5Zb3Ugc2VsZWN0ZWQ6IFRyYWNlIEV4YWN0IExvY2F0aW9uIgogICAgICAgICAgICB0eXBlX2FuaW1hdGlvbiAiUGxlYXNlIFdhaXQgVHJhY2UgRXhhY3QgTG9jYXRpb24gaXMgSW5zdGFsbGluZy4uLiAiCiAgICAgICAgICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vdGhld2hpdGVoNHQvc2Vla2VyCiAgICAgICAgICAgIGdyZWVuX3RleHRfYW5pbWF0aW9uICJcblRyYWNlIEV4YWN0IExvY2F0aW9uIGRvbmUgaW5zdGFsbGluZyBidXQgaXRzIG5vdCBhdXRvbWF0aWNhbGx5IHJ1biwgdG8gcnVuIHRoaXMgdG9vbCBleGl0IFRNSGVscGVyIHx8IGNkIHNlZWtlciB8fCBjaG1vZCAreCBpbnN0YWxsLnNoIHx8IC4vaW5zdGFsbC5zaCBvciBiYXNoIGluc3RhbGwuc2ggfHwgcHl0aG9uMyBzZWVrZXIucHlcbiIKICAgICAgICAgICAgOzsKICAgICAgICA4KQogICAgICAgICAgICB0eXBlX2FuaW1hdGlvbiAiXG5Zb3Ugc2VsZWN0ZWQ6IENhbS1EdW1wZXIiCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJQbGVhc2UgV2FpdCBDYW0tRHVtcGVyIGlzIEluc3RhbGxpbmcuLi4gIgogICAgICAgICAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL0xpTnVYLU1hbGx1L0NBTS1EVU1QRVIKICAgICAgICAgICAgZ3JlZW5fdGV4dF9hbmltYXRpb24gIlxuQ2FtLUR1bXBlciBpcyBkb25lIGluc3RhbGxpbmcgYnV0IGl0cyBub3QgYXV0b21hdGljYWxseSBydW4sIHRvIHJ1biB0aGlzIHRvb2wgZXhpdCBUTUhlbHBlciB8fCBhcHQgaW5zdGFsbCBnaXQgcGhwIHdnZXQgY3VybCBqcSB8fCBjZCBDQU0tRFVNUEVSIHx8IGNobW9kICt4IGNhbWR1bXBlci5zaCB8fCAuL2NhbWR1bXBlci5zaCBwciBiYXNoIGNhbWR1bXBlci5zaFxuIgogICAgICAgICAgICA7OwogICAgICAgIDkpCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJcbllvdSBzZWxlY3RlZDogVHJhY2stSVAiCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJQbGVhc2UgV2FpdCBUcmFjay1JUCBpcyBJbnN0YWxsaW5nLi4uICIKICAgICAgICAgICAgYXB0IHVwZGF0ZSAmJiBhcHQgaW5zdGFsbCBnaXQgY3VybCAteSAmJiB3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9odHItdGVjaC90cmFjay1pcC9tYXN0ZXIvdHJhY2tpcCAmJiBjaG1vZCAreCB0cmFja2lwICYmIC4vdHJhY2tpcAogICAgICAgICAgICA7OwogICAgICAgIDEwKQogICAgICAgICAgICB0eXBlX2FuaW1hdGlvbiAiXG5Zb3Ugc2VsZWN0ZWQ6IEJydXRlRm9yY2UiCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJQbGVhc2UgV2FpdCBCcnV0ZUZvcmNlIGlzIEluc3RhbGxpbmcuLi4gIgogICAgICAgICAgICB0ZXJtdXgtc2V0dXAtc3RvcmFnZSAmJiBwa2cgdXBkYXRlICYmIHBrZyB1cGdyYWRlICYmIHBrZyBpbnN0YWxsIHB5dGhvbiAmJiBwa2cgaW5zdGFsbCBnaXQgJiYgcGtnIGluc3RhbGwgcnVieSAmJiB3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TVExQLVRFQU0vRkItQnJ1dGUvbWFpbi9icnV0ZS5weSAmJiBwaXAgaW5zdGFsbCByZXF1ZXN0cyAmJiBwaXAgaW5zdGFsbCBtZWNoYW5pemUgJiYgcHl0aG9uIGJydXRlLnB5CiAgICAgICAgICAgIDs7CiAgICAgICAgMTEpCiAgICAgICAgICAgIHR5cGVfYW5pbWF0aW9uICJcbllvdSBzZWxlY3RlZDogVG9vbC1YIgogICAgICAgICAgICB0eXBlX2FuaW1hdGlvbiAiUGxlYXNlIFdhaXQgVG9vbC1YIGlzIEluc3RhbGxpbmcuLi4gIgogICAgICAgICAgICBhcHQgdXBkYXRlICYmIHBrZyBpbnN0YWxsIGdpdCAmJiBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL0Vycm9yLTQtWW91L1Rvb2wtWAogICAgICAgICAgICBncmVlbl90ZXh0X2FuaW1hdGlvbiAiXG5Ub29sLVggaXMgZG9uZSBpbnN0YWxsaW5nIGJ1dCBpdHMgbm90IGF1dG9tYXRpY2FsbHkgcnVuLCB0byBydW4gdGhpcyB0b29sIGV4aXQgVE1IZWxwZXIgfHwgY2QgVG9vbC1YIHx8IGNobW9kICt4IGluc3RhbGwgfHwgLi9pbnN0YWxsIG9yIGJhc2ggaW5zdGFsbFxuIgogICAgICAgICAgICA7OwogICAgICAgIDEzKQogICAgICAgICAgICAKCmJvbGQ9IlwwMzNbMW0iCmdyZWVuX2JnPSJcMDMzWzQybSIKcmVkX2JnPSJcMDMzWzQxbSIKcmVzZXQ9IlwwMzNbMG0iCgojIENsZWFyIHRoZSBzY3JlZW4KCmNsZWFyCmVjaG8gIiAiCiMgUHJpbnQgdGl0bGUgd2l0aCByZWQgYmFja2dyb3VuZCBhbmQgYm9sZCB0ZXh0CmVjaG8gLWUgIiR7cmVkX2JnfSR7Ym9sZH0gVW5pbnN0YWxsIFBhZ2U6IFRNSGVscGVyICR7cmVzZXR9IgoKIyBQcmludCB0aGUgbWVzc2FnZSB3aXRoIGJvbGQgcG9pbnRzCmVjaG8gLWUgIiR7Ym9sZH1EZWFyIFVzZXIsJHtyZXNldH0iCgojIFByaW50IHRoZSBpbnRyb2R1Y3RvcnkgcGFydAplY2hvIC1lICJXZSB1bmRlcnN0YW5kIHRoYXQgeW91J3JlIGNvbnNpZGVyaW5nIHVuaW5zdGFsbGluZyBUTUhlbHBlciwgYnV0IHdlJ2QgbGlrZSB0byB0YWtlIGEgbW9tZW50IHRvIGhpZ2hsaWdodCB0aGUgdmFsdWFibGUgYWR2YW50YWdlcyBpdCBicmluZ3MgdG8geW91ciBleHBlcmllbmNlLlxuIgoKIyBQcmludCB0aGUga2V5IGJlbmVmaXRzCmVjaG8gLWUgIkhlcmUncyB3aHkgVE1IZWxwZXIgaXMgYW4gYXNzZXQgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBrZWVwOlxuIgoKZWNobyAtZSAtbiAiJHtib2xkfTEuICR7Z3JlZW5fYmd9UG93ZXJmdWwgYW5kIENvbXByZWhlbnNpdmU6JHtyZXNldH0iCmVjaG8gLWUgIlRNSGVscGVyIGlzIG5vdCBqdXN0IGFub3RoZXIgcHJvZ3JhbTsgaXQncyBhIHBvd2VyIHRvb2wgZGVzaWduZWQgdG8gcHJvdmlkZSB5b3Ugd2l0aCBhIGN1cmF0ZWQgc2VsZWN0aW9uIG9mIGhhY2tpbmcsIHBlbmV0cmF0aW9uIHRlc3RpbmcsIGFuZCBwcm9ncmFtbWluZyB0b29scy4gVGhlc2UgdG9vbHMgYXJlIG9yZ2FuaXplZCBpbnRvIHVzIgoKZWNobyAtZSAtbiAiJHtib2xkfTIuICR7Z3JlZW5fYmd9RWZmaWNpZW5jeSBhbmQgRWFzZSBvZiBVc2U6JHtyZXNldH0iCmVjaG8gLWUgIlRNSGVscGVyIHN0cmVhbWxpbmVzIHlvdXIgd29ya2Zsb3cgYnkgb2ZmZXJpbmcgYSBzaW1wbGUgbWVudSB0aGF0IGFsbG93cyB5b3UgdG8gcXVpY2tseSBpbnN0YWxsIG5ldyBhbmQgdXBkYXRlZCBzY3JpcHRzLiBObyBtb3JlIGh1bnRpbmcgZm9yIHRvb2xzIG9yIGRlYWxpbmcgd2l0aCBjb21wbGV4IGluc3RhbGxhdGlvbnMg4oCTIFRlcm11eCIKCmVjaG8gLWUgLW4gIiR7Ym9sZH0zLiAke2dyZWVuX2JnfVNlY3VyaXR5IE1hdHRlcnM6JHtyZXNldH0iCmVjaG8gLWUgIllvdXIgc3lzdGVtJ3Mgc2VjdXJpdHkgaXMgb3VyIHByaW9yaXR5LiBUTUhlbHBlciBoYXMgYmVlbiBjYXJlZnVsbHkgZGVzaWduZWQgYW5kIHRlc3RlZCB0byBlbnN1cmUgdGhhdCBpdCB3b24ndCBjYXVzZSBoYXJtIHRvIHlvdXIgc3lzdGVtLiBZb3UgY2FuIGNvbmZpZGVudGx5IGV4cGxvcmUgYW5kIGV4cGVyaW1lbnQgd2l0aG91dCB3b3JyeS4iCgojIFByaW50IHRoZSBlbmNvdXJhZ2VtZW50IHRvIGtlZXAgVGVybXV4IEhlbHBlcgplY2hvIC1lICJcbldlIGVuY291cmFnZSB5b3UgdG8gcmVjb25zaWRlciB1bmluc3RhbGxpbmcgVE1IZWxwZXIuIEl0J3MgYSB2ZXJzYXRpbGUgcmVzb3VyY2UgdGhhdCBjYW4gZW1wb3dlciB5b3UgaW4geW91ciBjb2RpbmcsIHRlc3RpbmcsIGFuZCBleHBsb3JhdGlvbiBlbmRlYXZvcnMuXG4iCgojIFByb21wdCB1c2VyIGZvciBpbnB1dCB3aXRoIHJlZCBiYWNrZ3JvdW5kCmVjaG8gLWUgLW4gIiR7cmVkX2JnfSR7Ym9sZH1UeXBlICd1bmluc3RhbGwnIHRvIHByb2NlZWQgd2l0aCB1bmluc3RhbGxhdGlvbiBvciBwcmVzcyBFbnRlciB0byBrZWVwIFRNSGVscGVyOiIKcmVhZCAtcCAiIiB1c2VyX2lucHV0CmVjaG8gLWUgIiR7cmVzZXR9IgojIENoZWNrIHVzZXIncyBpbnB1dCBhbmQgcmVzcG9uZCBhY2NvcmRpbmdseQppZiBbWyAiJHVzZXJfaW5wdXQiID09ICJ1bmluc3RhbGwiIF1dOyB0aGVuCiAgICBlY2hvICJVbmluc3RhbGxpbmcuLi4iCiAgICBiYXNoICRQUkVGSVgvVE1IZWxwZXIvdW5pbnN0YWxsLnNoCiAgICBicmVhawplbHNlCiAgICBlY2hvICJUaGFuayB5b3UgZm9yIGNob29zaW5nIHRvIGtlZXAgVE1IZWxwZXIuIEl0J3MgYW4gaW52ZXN0bWVudCBpbiB5b3VyIHByb2R1Y3Rpdml0eSBhbmQgZ3Jvd3RoLiIKZmkKCgoKCgogICAgICAgICAgICAKICAgICAgICAgICAgOzsKICAgICAgICAgICAxMikKICAgICAgICB0eXBlX2FuaW1hdGlvbiAiV0FJVCBXRSBBUkUgVVBEQVRJTkcgVE1IZWxwZXIuLi4iCiAgICAgICAgY2QgL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL3Vzci9UTUhlbHBlci8KICAgICAgICBnaXQgcmVzZXQgLS1oYXJkCiAgICAgICAgZ2l0IHB1bGwgLS1mb3JjZQogICAgICAgIGNkCiAgICAgICAgdHlwZV9hbmltYXRpb24gIlVQREFURSBDT01QTEVURS4iCgogICAgICAgIAogICAgICAgIDs7CiAgICAqKQogICAgICAgICAgICBlY2hvICJJbnZhbGlkIGNob2ljZS4gUGxlYXNlIHNlbGVjdCBhIHZhbGlkIG9wdGlvbi4iCiAgICAgICAgICAgIDs7CiAgICBlc2FjCgogICAgcmVhZCAtcCAiUHJlc3MgRW50ZXIgdG8gY29udGludWUgb3IgMCB0byBFWElUOiAiIGxhc3RjaG9pY2UKCmlmIFsgIiRsYXN0Y2hvaWNlIiA9PSAiMCIgXTsgdGhlbgogICAgZWNobwogICAgZ3JlZW5fdGV4dF9hbmltYXRpb24gIlRNSGVscGVyIEV4aXRlZCBzdWNjZXNzZnVsbHkuIgogICAgZWNobwogICAgcHJpbnRfcmFuZG9tX25pY2VfbWVzc2FnZQogICAgZXhpdCAwCmZpCiAgICAKZG9uZQ==" | base64 -d | sh
